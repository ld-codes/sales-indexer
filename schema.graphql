"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Order`."""
  orders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderCondition
  ): OrdersConnection

  """Reads and enables pagination through a set of `OrderItem`."""
  orderItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection

  """Reads and enables pagination through a set of `Payment`."""
  payments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection
  order(id: String!): Order
  orderItem(id: BigInt!): OrderItem
  payment(id: BigInt!): Payment

  """Reads a single `Order` using its globally unique `ID`."""
  orderByNodeId(
    """The globally unique `ID` to be used in selecting a single `Order`."""
    nodeId: ID!
  ): Order

  """Reads a single `OrderItem` using its globally unique `ID`."""
  orderItemByNodeId(
    """The globally unique `ID` to be used in selecting a single `OrderItem`."""
    nodeId: ID!
  ): OrderItem

  """Reads a single `Payment` using its globally unique `ID`."""
  paymentByNodeId(
    """The globally unique `ID` to be used in selecting a single `Payment`."""
    nodeId: ID!
  ): Payment
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Order` values."""
type OrdersConnection {
  """A list of `Order` objects."""
  nodes: [Order]!

  """
  A list of edges which contains the `Order` and cursor to aid in pagination.
  """
  edges: [OrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Order` you could get from the connection."""
  totalCount: Int!
}

type Order implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  seller: String!
  buyer: String!
  createdAt: Datetime
  transactionHash: String!

  """Reads and enables pagination through a set of `Payment`."""
  payments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection!

  """Reads and enables pagination through a set of `OrderItem`."""
  orderItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A connection to a list of `Payment` values."""
type PaymentsConnection {
  """A list of `Payment` objects."""
  nodes: [Payment]!

  """
  A list of edges which contains the `Payment` and cursor to aid in pagination.
  """
  edges: [PaymentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Payment` you could get from the connection."""
  totalCount: Int!
}

type Payment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  orderId: String!
  tokenAddress: String!
  tokenId: String!
  amount: String!
  createdAt: Datetime

  """Reads a single `Order` that is related to this `Payment`."""
  order: Order
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A `Payment` edge in the connection."""
type PaymentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Payment` at the end of the edge."""
  node: Payment
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Payment`."""
enum PaymentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORDER_ID_ASC
  ORDER_ID_DESC
  TOKEN_ADDRESS_ASC
  TOKEN_ADDRESS_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Payment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PaymentCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `orderId` field."""
  orderId: String

  """Checks for equality with the object’s `tokenAddress` field."""
  tokenAddress: String

  """Checks for equality with the object’s `tokenId` field."""
  tokenId: String

  """Checks for equality with the object’s `amount` field."""
  amount: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `OrderItem` values."""
type OrderItemsConnection {
  """A list of `OrderItem` objects."""
  nodes: [OrderItem]!

  """
  A list of edges which contains the `OrderItem` and cursor to aid in pagination.
  """
  edges: [OrderItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OrderItem` you could get from the connection."""
  totalCount: Int!
}

type OrderItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  orderId: String!
  tokenAddress: String!
  tokenId: String!
  amount: String!
  createdAt: Datetime

  """Reads a single `Order` that is related to this `OrderItem`."""
  order: Order
}

"""A `OrderItem` edge in the connection."""
type OrderItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrderItem` at the end of the edge."""
  node: OrderItem
}

"""Methods to use when ordering `OrderItem`."""
enum OrderItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORDER_ID_ASC
  ORDER_ID_DESC
  TOKEN_ADDRESS_ASC
  TOKEN_ADDRESS_DESC
  TOKEN_ID_ASC
  TOKEN_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `OrderItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OrderItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `orderId` field."""
  orderId: String

  """Checks for equality with the object’s `tokenAddress` field."""
  tokenAddress: String

  """Checks for equality with the object’s `tokenId` field."""
  tokenId: String

  """Checks for equality with the object’s `amount` field."""
  amount: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A `Order` edge in the connection."""
type OrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Order` at the end of the edge."""
  node: Order
}

"""Methods to use when ordering `Order`."""
enum OrdersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SELLER_ASC
  SELLER_DESC
  BUYER_ASC
  BUYER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Order` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OrderCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `seller` field."""
  seller: String

  """Checks for equality with the object’s `buyer` field."""
  buyer: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Order`."""
  createOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrderInput!
  ): CreateOrderPayload

  """Creates a single `OrderItem`."""
  createOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrderItemInput!
  ): CreateOrderItemPayload

  """Creates a single `Payment`."""
  createPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePaymentInput!
  ): CreatePaymentPayload

  """Updates a single `Order` using its globally unique id and a patch."""
  updateOrderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderByNodeIdInput!
  ): UpdateOrderPayload

  """Updates a single `Order` using a unique key and a patch."""
  updateOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderInput!
  ): UpdateOrderPayload

  """Updates a single `OrderItem` using its globally unique id and a patch."""
  updateOrderItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderItemByNodeIdInput!
  ): UpdateOrderItemPayload

  """Updates a single `OrderItem` using a unique key and a patch."""
  updateOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderItemInput!
  ): UpdateOrderItemPayload

  """Updates a single `Payment` using its globally unique id and a patch."""
  updatePaymentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentByNodeIdInput!
  ): UpdatePaymentPayload

  """Updates a single `Payment` using a unique key and a patch."""
  updatePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentInput!
  ): UpdatePaymentPayload

  """Deletes a single `Order` using its globally unique id."""
  deleteOrderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderByNodeIdInput!
  ): DeleteOrderPayload

  """Deletes a single `Order` using a unique key."""
  deleteOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderInput!
  ): DeleteOrderPayload

  """Deletes a single `OrderItem` using its globally unique id."""
  deleteOrderItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderItemByNodeIdInput!
  ): DeleteOrderItemPayload

  """Deletes a single `OrderItem` using a unique key."""
  deleteOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderItemInput!
  ): DeleteOrderItemPayload

  """Deletes a single `Payment` using its globally unique id."""
  deletePaymentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentByNodeIdInput!
  ): DeletePaymentPayload

  """Deletes a single `Payment` using a unique key."""
  deletePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentInput!
  ): DeletePaymentPayload
}

"""The output of our create `Order` mutation."""
type CreateOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was created by this mutation."""
  order: Order

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

"""All input for the create `Order` mutation."""
input CreateOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Order` to be created by this mutation."""
  order: OrderInput!
}

"""An input for mutations affecting `Order`"""
input OrderInput {
  id: String!
  seller: String!
  buyer: String!
  createdAt: Datetime
  transactionHash: String!
}

"""The output of our create `OrderItem` mutation."""
type CreateOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was created by this mutation."""
  orderItem: OrderItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `OrderItem`."""
  order: Order

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the create `OrderItem` mutation."""
input CreateOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrderItem` to be created by this mutation."""
  orderItem: OrderItemInput!
}

"""An input for mutations affecting `OrderItem`"""
input OrderItemInput {
  id: BigInt
  orderId: String!
  tokenAddress: String!
  tokenId: String!
  amount: String!
  createdAt: Datetime
}

"""The output of our create `Payment` mutation."""
type CreatePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Payment` that was created by this mutation."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `Payment`."""
  order: Order

  """An edge for our `Payment`. May be used by Relay 1."""
  paymentEdge(
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""All input for the create `Payment` mutation."""
input CreatePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Payment` to be created by this mutation."""
  payment: PaymentInput!
}

"""An input for mutations affecting `Payment`"""
input PaymentInput {
  id: BigInt
  orderId: String!
  tokenAddress: String!
  tokenId: String!
  amount: String!
  createdAt: Datetime
}

"""The output of our update `Order` mutation."""
type UpdateOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was updated by this mutation."""
  order: Order

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

"""All input for the `updateOrderByNodeId` mutation."""
input UpdateOrderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Order` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Order` being updated.
  """
  patch: OrderPatch!
}

"""
Represents an update to a `Order`. Fields that are set will be updated.
"""
input OrderPatch {
  id: String
  seller: String
  buyer: String
  createdAt: Datetime
  transactionHash: String
}

"""All input for the `updateOrder` mutation."""
input UpdateOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Order` being updated.
  """
  patch: OrderPatch!
  id: String!
}

"""The output of our update `OrderItem` mutation."""
type UpdateOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was updated by this mutation."""
  orderItem: OrderItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `OrderItem`."""
  order: Order

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the `updateOrderItemByNodeId` mutation."""
input UpdateOrderItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrderItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrderItem` being updated.
  """
  patch: OrderItemPatch!
}

"""
Represents an update to a `OrderItem`. Fields that are set will be updated.
"""
input OrderItemPatch {
  id: BigInt
  orderId: String
  tokenAddress: String
  tokenId: String
  amount: String
  createdAt: Datetime
}

"""All input for the `updateOrderItem` mutation."""
input UpdateOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrderItem` being updated.
  """
  patch: OrderItemPatch!
  id: BigInt!
}

"""The output of our update `Payment` mutation."""
type UpdatePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Payment` that was updated by this mutation."""
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `Payment`."""
  order: Order

  """An edge for our `Payment`. May be used by Relay 1."""
  paymentEdge(
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""All input for the `updatePaymentByNodeId` mutation."""
input UpdatePaymentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Payment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  patch: PaymentPatch!
}

"""
Represents an update to a `Payment`. Fields that are set will be updated.
"""
input PaymentPatch {
  id: BigInt
  orderId: String
  tokenAddress: String
  tokenId: String
  amount: String
  createdAt: Datetime
}

"""All input for the `updatePayment` mutation."""
input UpdatePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  patch: PaymentPatch!
  id: BigInt!
}

"""The output of our delete `Order` mutation."""
type DeleteOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Order` that was deleted by this mutation."""
  order: Order
  deletedOrderNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Order`. May be used by Relay 1."""
  orderEdge(
    """The method to use when ordering `Order`."""
    orderBy: [OrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrdersEdge
}

"""All input for the `deleteOrderByNodeId` mutation."""
input DeleteOrderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Order` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrder` mutation."""
input DeleteOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `OrderItem` mutation."""
type DeleteOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was deleted by this mutation."""
  orderItem: OrderItem
  deletedOrderItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `OrderItem`."""
  order: Order

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the `deleteOrderItemByNodeId` mutation."""
input DeleteOrderItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrderItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrderItem` mutation."""
input DeleteOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Payment` mutation."""
type DeletePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Payment` that was deleted by this mutation."""
  payment: Payment
  deletedPaymentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Order` that is related to this `Payment`."""
  order: Order

  """An edge for our `Payment`. May be used by Relay 1."""
  paymentEdge(
    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""All input for the `deletePaymentByNodeId` mutation."""
input DeletePaymentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Payment` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePayment` mutation."""
input DeletePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}
